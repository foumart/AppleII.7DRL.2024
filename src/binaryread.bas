10 REM TEMPORARY LOADER FILE - PRINTS A TEXT FILE TO PREPARE THE SCREEN BEFORE THE GAME STARTS
20 REM WORKS PRETTY MUCH LIKE LOADING A BITMAP IMAGE WITH GAME UI, BUT WITH TEXT DATA INSTEAD
30 REM SUPPORTS UPPERCASE, LOWERCASE, INVERSE AND MOUSE TEXT AND IS USEFUL FOR CREATING TEXT UI
40 REM TRIGGERS: NORMAL [INVERSE] {MOUSETEXT}
50 REM "~" = IDENT SPACE, ";" = TWO VERTICAL LINES, "`" = TWO DOTS PUNCTUATION (:)
60 REM COMMA AND TWO DOTS CAN'T BE READ BY BASIC
70 REM
71 REM 0006 (6)    READCHAR CODE PLACEHOLDER
72 REM 0300 - 030F RANDOMIZE SEED ROUTINE WITH RND(NEGATIVE)
73 REM 0310 - 0332 READCHAR ROUTINE
80 REM 03FF (1023) DEBUG (1:ON, 0:OFF)

100 REM LOMEM: 24576 : REM PREVENT WRITING IN THE GRAPHIC PAGES


1000 DEBUG = 1 : POKE 1023,DEBUG
1010 REM SPEED = 1 : POKE 1023,1 : REM DEBUG

1020 BL = 0 : REM DATA IS LOADED FROM A TEXT FILE WITH READ OR BLOAD
1030 I = 1 : B$ = "" : Z = 24 : OFFSET = 20
1040 LO$ = N$+M$+"V"+N$ : LQ$ = N$+M$+"W"+N$
1050 DIM LINES$(Z)
1052 DIM TXTDTA(4)
1055 DIM CHARS(5)

1060 D$ = CHR$(4)
1070 MI$ = CHR$(15) : REM TURN INVERSE ON
1080 NI$ = CHR$(14) : REM TURN INVERSE OFF
1090 M$ = MI$ + CHR$(27) : REM TURN SPECIAL CHARACTERS ON (80COL MOUSE TEXT CARD CHARS)
1100 N$ = CHR$(24) + NI$ : REM TURN SPECIAL CHARACTERS OFF

1200 PRINT D$;"PR#3" : PRINT CHR$(12); : REM TURN 80COL MODE ON AND CLEAR SCREEN

1245 REM LOADS A SMALL ROUTINE AT $0300 THAT INCREMENTS THE RND LOCATIONS WHILE WAITING FOR KEYPRESS
1250 FOR O = 768 TO 782 : READ P
1260 POKE O,P : NEXT O : REM : CALL 768 : X = RND(-1*(PEEK(78)+256*PEEK(79))) : PRINT X
1300 DATA 230,78,208,2,230,79,44,0,192,16,245,44,16,192,96

1310 REM FOR O = 1 TO 21
1320 REM PRINT
1330 REM NEXT O
1335 TEXT
1340 HTAB(OFFSET) : PRINT N$;"_            ___________________________"
1350 HTAB(OFFSET) : PRINT M$;"C";N$;" Preparing ";M$;"Z";N$;MI$;" ";NI$;M$;
1400 FOR P = 1 TO Z + 1
1410 PRINT "\\";
1420 NEXT P
1430 PRINT N$;MI$;" ";NI$;M$;"_";N$;
1435 VTAB(24) : HTAB(OFFSET + 13) : FOR P = 1 TO Z + 3 : PRINT M$;"L";N$; : NEXT P

1450 TADDR = 24576 : TADDR$ = "6000" : REM FREE MEMORY SPACE TO LOAD TEXT DATA INTO
1460 PRINT D$;"BLOAD UI,TTXT,A$";TADDR$

2750 REM GETS THE THREE VARIABLES AT THE BEGINNING OF THE TEXT FILE (L:LENGTH, H:INDENT, V:TOP)
2800 REM ALSO WILL SAVE THE STARTING ADDRESS OF THE ACTUAL TEXT DATA BECAUSE IT CAN VARY
2850 VTAB(23) : HTAB(OFFSET + 13) : PRINT M$;LO$;N$;
2900 I = 0 : REM CURRENT ADDRESS POSITION FROM THE LOADED TEXT DATA
3000 E = 0 : REM CURRENT TEXT VAR

3150 TXTDTA(1) = 0 : TXTDTA(2) = 0 : TXTDTA(3) = 0 : TXTDTA(4) = 0 : REM TEXT VARS HOLDER
3200 REM TEXT : ? CHR$(12)

3300 K = 0 : REM CURRENT X POSITION OF TEXT VARIABLE READING
3400 CHARS(1) = 0 : CHARS(2) = 0 : CHARS(3) = 0 : CHARS(4) = 0 : CHARS(5) = 0 : REM PARTS OF THE NUMBER
3500 REM ITERATE THROUGH BYTES
3600 J = PEEK(TADDR + I) : REM READ THE NEXT ADDRESS
3700 IF J = 141 THEN GOTO 4200 : REM LINE BREAK MARKS THE END OF A TEXT VARIABLE DATA
3800 K = K + 1
3900 CHARS(K) = J - 128
4000 I = I + 1
4100 GOTO 3500

4200 REM DATA FOR THE TEXT VARS WILL BE READ AS STRINGS AND THEN COMBINED INTO NUMBERS
4300 I$ = "" : I = I + 1
4400 FOR F = 0 TO K
4500 I$ = I$ + CHR$(CHARS(F + 1))
4600 NEXT F
4700 E = E + 1
4800 TXTDTA(E) = VAL(I$)
4900 IF E < 3 THEN GOTO 3300 : REM READ NEXT VARIABLE
5000 TXTDTA(4) = TADDR + I : REM ACTUAL TEXT DATA BEGINS FROM THIS ADDRESS
5100 L = TXTDTA(1) : H = TXTDTA(2) : V = TXTDTA(3) : A = TXTDTA(4) : REM ? L , H, V, A : END
5300 REM HB = INT(A / 256) : TODO : PRLINES
5400 REM LB = A - (HB * 256)
5500 REM POKE 31994,HB
5600 REM POKE 31995,LB
5700 REM POKE 31996,L
5800 REM POKE 31997,H
5900 REM POKE 31998,V
6000 REM CALL 31744 : END : REM CALL PRLINES ASM
6050 PRINT M$;LO$;N$;

9100 HOME
9200 REM PRINTING THE DATA ON SCREEN
9300 FOR I = A TO A + L
9350    REM IF I = A+L THEN ? LINES$(I); : GOTO 9500
9400   IF PEEK(I + 1) = 141 THEN ? CHR$(PEEK(I)) : I = I + 1 : GOTO 9500
9450   ? CHR$(PEEK(I));
9500 NEXT I

9980 REM RUNNING A NEW BASIC FILE SHOULD WIPE ALL THE ABOVE
9990 REM USED ONLY AT THE BEGINNING TO DRAW THE TEXT SCREEN UI
10000 END
