100 REM TEMPORARY LOADER FILE - PRINTS A TEXT FILE TO PREPARE THE SCREEN BEFORE THE GAME STARTS
200 REM WORKS PRETTY MUCH LIKE LOADING A BITMAP IMAGE WITH GAME UI, BUT WITH TEXT DATA INSTEAD
300 REM SUPPORTS UPPERCASE, LOWERCASE, INVERSE AND MOUSE TEXT AND IS USEFUL FOR CREATING TEXT UI
400 REM TRIGGERS: NORMAL [INVERSE] {MOUSETEXT}
500 REM "~" = IDENT SPACE, ";" = TWO VERTICAL LINES, "`" = TWO DOTS PUNCTUATION (:)
600 REM COMMA AND TWO DOTS CAN'T BE READ BY BASIC

700 I = 1 : B$ = "" : A = 16384
800 D$ = CHR$(4)
900 M$ = CHR$(27) + CHR$(15) : REM TURN SPECIAL CHARACTERS ON (80COL MOUSE TEXT CARD CHARS)
1000 N$ = CHR$(24) + CHR$(14) : REM TURN SPECIAL CHARACTERS OFF

1100 HGR : HGR2 : TEXT : PRINT D$;"PR#3" : REM TURN 80COL MODE ON
 
1200 PRINT CHR$(4); "BLOAD PRLINES,A$7C00"
1300 PRINT CHR$(4); "BLOAD DATA,TTXT,A$4000" : GOTO 2500

1400 ONERR GOTO 2400 : REM OPEN AND READ A TEXT FILE, SAVING THE DATA IN AN ARRAY (LINES$)
1500 PRINT D$;"OPEN DATA"
1600 PRINT D$;"READ DATA"
1700 INPUT L : REM GET THE TOTAL LINES OF THE TEXT FILE (FIRST PARAMETER FROM TEXT FILE)
1800 INPUT H : HTAB(H) : REM GET LEFT OFFSET WHEN INSERTING THE TEXT (SECOND PARAMETER FROM TEXT FILE)
1900 INPUT V : VTAB(V) : REM GET TOP OFFSET WHEN INSERTING THE TEXT (THIRD PARAMETER FROM TEXT FILE)
2000 DIM LINES$(L) : REM DEFINE AN ARRAY TO HOLD THE TEXT DATA
2100 INPUT A$ : REM GET THE NEXT DATA ROW
2200 LINES$(I) = A$ : I = I + 1 : REM SAVE IT
2300 GOTO 2100 : REM LOOP
2400 PRINT D$;"CLOSE"

2500 REM GETS THE THREE VARIABLES AT THE BEGINNING OF THE TEXT FILE (L:LINE LENGTH, H:INDENT, V:TOP)
2600 REM ALSO WILL SAVE THE STARTING ADDRESS OF THE ACTUAL TEXT DATA BECAUSE IT CAN VARY
2700 I = 0 : REM CURRENT ADDRESS POSITION FROM THE LOADED TEXT DATA
2800 E = 0 : REM CURRENT TEXT VAR
2900 DIM TXTDTA(4) : TXTDTA(1) = 0 : TXTDTA(2) = 0 : TXTDTA(3) = 0 : TXTDTA(4) = 0 : REM TEXT VARS HOLDER
3000 DIM CHARS(3)

3100 K = 0 : REM CURRENT X POSITION OF TEXT VARIABLE READING
3200 CHARS(1) = 0 : CHARS(2) = 0 : CHARS(3) = 0 : REM PARTS OF THE NUMBER

3300 REM ITTERATE THROUGH BYTES
3400 J = PEEK(A + I) : REM READ THE NEXT ADDRESS
3500 IF J = 141 THEN GOTO 4000 : REM LINE BREAK MARKS THE END OF A TEXT VARIABLE DATA
3600 K = K + 1
3700 CHARS(K) = J - 128
3800 I = I + 1
3900 GOTO 3300

4000 REM DATA FOR THE TEXT VARS WILL BE READ AS STRINGS AND THEN COMBINED INTO NUMBERS
4100 I$ = "" : I = I + 1
4200 FOR F = 0 TO K
4300 I$ = I$ + CHR$(CHARS(F + 1))
4400 NEXT F
4500 E = E + 1
4600 TXTDTA(E) = VAL(I$)
4700 IF E < 3 THEN GOTO 3100
4800 TXTDTA(4) = A + I : REM PRINT TXTDTA(1), TXTDTA(2), TXTDTA(3) : REM DEBUG THE TEXT DATA
4900 L = TXTDTA(1) : H = TXTDTA(2) : V = TXTDTA(3) : A = TXTDTA(4)
4905 REM ? A : GOSUB 10000 : REM H$(0); H$(1); H$(2); H$(3); REM CONVERT THE ADDRESS TO HEX SO WE CAN WRITE TO ADDRESSES NEEDED FOR THE PRLINES ROUTINE
4910 HB = INT(A / 256)
4920 LB = A - (HB * 256)
4930 POKE 31994,HB
4940 POKE 31995,LB
4950 POKE 31996,L
4960 POKE 31997,H
4970 POKE 31998,V
4980 CALL 31744
5000 END

5100 REM PRINTING THE DATA ON SCREEN
5200 FOR I = 1 TO L
5300   A$ = LINES$(I) : M = LEN(A$) : D = 1
5400   VTAB(V + I - 1)
5500   FOR X = 1 TO M
5600     B$ = MID$(A$, X, 1)
5700     C = ASC(B$)
5800     IF C = 123 THEN D = D + 1 : HTAB(H + X - D) : ? M$; : GOTO 6500 : REM TURN MOUSE TEXT ON WITH TRIGGER: "{"
5900     IF C = 125 THEN D = D + 1 : HTAB(H + X - D) : ? N$; : GOTO 6500 : REM TURN MOUSE TEXT OFF WITH TRIGGER: "}"
6000     IF C = 91 THEN D = D + 1 : HTAB(H + X - D) : ? CHR$(15); : GOTO 6500 : REM TURN INVERSE ON WITH TRIGGER: "["
6100     IF C = 93 THEN D = D + 1 : HTAB(H + X - D) : ? CHR$(14); : GOTO 6500 : REM TURN INVERSE OFF WITH TRIGGER: "]"
6200     IF C = 59 THEN HTAB(H + X - D) : ? "\\"; : GOTO 6500 : REM TYPE IN BETWEEN VERTICAL SPACE WITH TRIGGER: ";"
6300     IF C = 96 THEN HTAB(H + X - D) : ? ":"; : GOTO 6500 : REM TYPE TWO DOTS PUNCTUATION ":" WITH TRIGGER: "`"
6400     IF C < 125 THEN HTAB(H + X - D) : ? B$; : REM WILL PRINT THE REQUESTED LETTER, SPACE INTERPRETATION: "~"
6500   NEXT X
6600 NEXT I

6700 REM RUNNING A NEW BASIC FILE SHOULD WIPE ALL THE ABOVE
6800 REM USED ONLY AT THE BEGINNING TO DRAW THE TEXT SCREEN UI
6900 VTAB(1) : PRINT D$;"RUN MAIN"

10000 DIM P(15), H$(3) : REM ARRAY P WITH DIMENSION FOR 16 ELEMENTS, AND H$ TO STORE HEX DIGITS
10060 Q = A : REM Q WILL REPRESENT THE QUOTIENT
10090 FOR I = 15 TO 0 STEP - 1 : REM FOR LOOP IN REVERSE
10100 R = 0 : REM INITIALIZE THE REMAINDER TO 0
10110 R = Q - (INT(Q / 2) * 2) : REM CALCULATE R
10120 P(I) = R : REM ASSIGN THE ELEMENT OF THE ARRAY AT INDEX I TO THE REMAINDER
10130 Q = INT(Q / 2) : REM CALCULATE THE 
10140 NEXT I
10150 REM PRINT A; " IS "; P(0); P(1); P(2); P(3); P(4); P(5); P(6); P(7); P(8); P(9); P(10); P(11); P(12); P(13); P(14); P(15); " IN BINARY."
10160 TEM$ = "0123456789ABCDEF" : REM WE NEED THIS STRING TO GET THE VALUE A TO F
10170 Q = A
10180 FOR I = 3 TO 0 STEP -1
10190 R = 0
10200 R = Q - (INT(Q / 16) * 16)
10210 H$(I) = MID$(TEM$, R + 1, 1) : REM WE GET THE POSITION FOR STRING TEM$ LOCATED AT R AND THE RESULTING SUBSTRING IS JUST 1 CHR
10220 Q = INT(Q / 16)
10230 NEXT I
10240 REM PRINT "AND "; A; " EQUALS 0x"; H$(0); H$(1); H$(2); H$(3); " IN HEXADECIMAL."
10250 RETURN