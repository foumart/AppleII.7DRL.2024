0 REM 7DRL2024 ENTRY BY NONCHO SAVOV
5 REM COPYRIGHT (C) 2024 BY FOUMARTGAMES

10 ONERR GOTO 60000 : REM BETTER ERROR HANDLING (NEEDS 14 BYTES AT THE BEGINNING IN A REM)
20 FOR I = 826 TO 839 : REM WRITE THE MACHINE CODE IN THE BEGINNING OF THIS SAME BASIC FILE
30   READ K
40   POKE I,K
50 NEXT
80 DATA 166,222,189,96,210,72,32,92,219,232,104,16,245,96

100 GOTO 2000

195 REM BELOW ARE ROUTINES THAT NEED TO BE FAST,
196 REM THEREFORE THEY ARE AT THE BEGINNING OF THE PROGRAM


197 REM HTAB() BUG HANDLING - MAKE SURE WE HAVE THE CORRECT HORIZONTAL POSITION
198 REM PEEK(36) AND POS(0) ARE NOT WORKING IN 80 COL, SO WE WRITE TO DIFFERENT ADDRESSES
199 REM REM POKE 1531,Y : POKE 37,Y (Y IS OKAY)
200 POKE 1147,XX-1 : POKE 1403,XX-1 : POKE 36,XX-1
260 RETURN


279 REM RUN GC OR PRODOS FRE AND DISPLAY FREE MEMORY LEFT IF IN DEBUG MODE
280 IF FF = 1 THEN AVAIL = FRE(0)
284 IF FF = 2 THEN ? D$;"FRE"
286 FF = 0
288 IF DEBUG = 0 THEN RETURN
290 IF DEBUG > 0 THEN HTAB(62) : VTAB (24) : PRINT MI$;" free:";INT(AVAIL/1000);"k ";AVAIL;
291 IF (AVAIL > 9999) THEN PRINT " ";NI$; : GOTO 295
292 IF (AVAIL > 999) THEN PRINT "   ";NI$; : GOTO 295
293 PRINT "    ";NI$;
295 RETURN


299 REM MAP CHARACTER READ ROUTINE
300 XX = X : GOSUB 200
320 VTAB(Y) : REM SET POSITION
350 CALL 784: REM CALL THE GETCHAR ROUTINE LOADED AT $0310
355 A = PEEK(6)
360 IF A > 127 THEN A$ = N$ + CHR$(A)
365 IF A < 128 THEN A$ = M$ + CHR$(A) + N$
370 REM GOSUB 24000 : REM GET LAST PRESSED KEY AND DISPLAY DEBUG CURSOR INFO
375 GOSUB 280 : REM FRE
380 REM TODO AT CHECK BYTES:
385 REM 0 (NOT MOVED YET) : -5 (MOVING IN) : -7 (MOVING IN MOUSE TETXT)
390 K = 0
395 RETURN



1995 REM VARIABLE DECLARATIONS
2000 DEBUG = PEEK(1023) : REM GET DEBUG SETTING SAVED BY STARTUP
2005 D$ = CHR$(4) : AVAIL = FRE(0)
2010 MI$ = CHR$(15) : REM TURN INVERSE ON
2015 NI$ = CHR$(14) : REM TURN INVERSE OFF
2020 M$ = MI$ + CHR$(27) : REM TURN SPECIAL CHARACTERS ON (80COL MOUSE TEXT CARD CHARS)
2025 N$ = CHR$(24) + NI$ : REM TURN SPECIAL CHARACTERS OFF
2030 KY = PEEK(49152) : REM VARIABLE TO KEEP LAST PRESSED KEY
2040 XX = 0 : YY = 0 : ZZ = 0 : REM VARIABLES TO BE USED IN SUBROUTINES LIKE THE ALTERNATIVE HTAB OR WHILE GENERATING A STAGE
2045 FF = 0 : REM SET TO 1 TO PERFORM FRE(0), SET TO 2 TO PERFORM THE PRODOS FRE() COMMAND
2050 MOVING = 0 : MDIR = 0

6796 REM GOSUB 21000 : REM DISPLAY PLAYER STATS

6899 REM DECLARE PLAYER VARIABLES
6900 DIM CLASSES$(3)
6905 CLASSES$(1) = "Squire" : CLASSES$(2) = "Strider" : CLASSES$(3) = "Apprentice"
6910 CLASS = 1 : HP = 20 : MP = 0 : DM = 2 : AC = 0 : GOLD = 0 : EX = 0
6915 DIM ITEMS$(5, 4) : REM 1:WEAPON, 2:SECONDARY ITEM, 3:ARMOR, 4:HEAD GEAR, 5:SPECIAL ITEM (RING, BRACER, AMULET, ETC.)
6920 IF CLASS = 1 THEN ITEMS$(1, 1) = "Bronze Sword" : ITEMS$(1, 2) = "Iron Sword" : ITEMS$(1, 3) = "Mithril Sword" : ITEMS$(1, 4) = "Unidentified"
6922 IF CLASS = 1 THEN ITEMS$(2, 1) = "Wooden Shield" : ITEMS$(2, 2) = "Iron Shield" : ITEMS$(2, 3) = "Mithril Shield" : ITEMS$(2, 4) = "Unidentified"
6924 IF CLASS = 1 THEN ITEMS$(3, 1) = "Leather Armor" : ITEMS$(3, 2) = "Chain Mail" : ITEMS$(3, 3) = "Plate Mail" : ITEMS$(3, 4) = "Unidentified"
6926 IF CLASS = 1 THEN ITEMS$(4, 1) = "Bronze Helm" : ITEMS$(4, 2) = "Iron Helm" : ITEMS$(4, 3) = "Mithril Helm" : ITEMS$(4, 4) = "Unidentified"
6928 IF CLASS = 1 THEN ITEMS$(5, 1) = "Bracer" : ITEMS$(5, 2) = "Ring" : ITEMS$(5, 3) = "Amulet" : ITEMS$(5, 4) = "Unidentified"

6930 IF CLASS = 2 THEN ITEMS$(1, 1) = "Bronze Dagger" : ITEMS$(1, 2) = "Iron Sword" : ITEMS$(1, 3) = "Mithril Sword" : ITEMS$(1, 4) = "Unidentified"
6932 IF CLASS = 2 THEN ITEMS$(2, 1) = "Shortbow" : ITEMS$(2, 2) = "Iron Shield" : ITEMS$(2, 3) = "Mithril Shield" : ITEMS$(2, 4) = "Unidentified"
6934 IF CLASS = 2 THEN ITEMS$(3, 1) = "Leather Vest" : ITEMS$(3, 2) = "Chain Mail" : ITEMS$(3, 3) = "Plate Mail" : ITEMS$(3, 4) = "Unidentified"
6936 IF CLASS = 2 THEN ITEMS$(4, 1) = "Ranger Hood" : ITEMS$(4, 2) = "Iron Helm" : ITEMS$(4, 3) = "Mithril Helm" : ITEMS$(4, 4) = "Unidentified"
6938 IF CLASS = 2 THEN ITEMS$(5, 1) = "Amulet" : ITEMS$(5, 2) = "Ring" : ITEMS$(5, 3) = "Bracelet" : ITEMS$(5, 4) = "Unidentified"

6940 IF CLASS = 3 THEN ITEMS$(1, 1) = "Quarterstaff" : ITEMS$(1, 2) = "Iron Sword" : ITEMS$(1, 3) = "Mithril Sword" : ITEMS$(1, 4) = "Unidentified"
6942 IF CLASS = 3 THEN ITEMS$(2, 1) = "Spellbook" : ITEMS$(2, 2) = "Iron Shield" : ITEMS$(2, 3) = "Mithril Shield" : ITEMS$(2, 4) = "Unidentified"
6944 IF CLASS = 3 THEN ITEMS$(3, 1) = "Cloth Robe" : ITEMS$(3, 2) = "Chain Mail" : ITEMS$(3, 3) = "Plate Mail" : ITEMS$(3, 4) = "Unidentified"
6946 IF CLASS = 3 THEN ITEMS$(4, 1) = "Wizard Hat" : ITEMS$(4, 2) = "Iron Helm" : ITEMS$(4, 3) = "Mithril Helm" : ITEMS$(4, 4) = "Unidentified"
6948 IF CLASS = 3 THEN ITEMS$(5, 1) = "Ring" : ITEMS$(5, 2) = "Amulet" : ITEMS$(5, 3) = "Bracelet" : ITEMS$(5, 4) = "Unidentified"

6950 DIM INV(8) : INV(1) = 1 : INV(1) = 2 : INV(3) = 3

6990 X1 = 15 : REM TODO FIX

7000 MX = 0 : MY = 0 : REM MAP ROOMS COORDINATES
7020 RW = 9 : RH = 4 : REM ROOM SIZE
7030 X = X1 : Y = 19 : REM INITIAL PLAYER POSITION (X VARIES, Y IS ALWAYS AT THE BOTTOM)
7040 A = 160 : REM HOLDS THE MAP TILE PLAYER IS CURRENTLY ON READ BY THE READCHAR ROUTINE.
7050 DIM PLAYER(3) : REM HOLDS X, Y, AND THE MAP CHARACTER THAT'S BEHIND THE UNIT
7060 PLAYER(1) = X : PLAYER(2) = Y : PLAYER(3) = A
7070 A$ = CHR$(160) : REM THE CHARACTER CODE READ BY THE ROUTINE BUT AS STRING


7199 REM 
7200 DIM ROOMS$(4)

7219 REM EMPTY
7220 ROOMS$(1) = "  "

7229 REM ENTRANCE
7230 ROOMS$(2) = " "+M$+CHR$(93)+N$

7239 REM EXIT
7240 ROOMS$(3) = M$+CHR$(90)+CHR$(94)+N$

7249 REM ROMBUS
7250 ROOMS$(4) = " "+M$+CHR$(91)+N$



9985 GOSUB 300 : REM GET CHAR ROUTINE
9990 K = 0 : REM VTAB(1) : END : BREAK JUST BEFORE MAIN GAME LOOP

10000 PLAYER(1) = X : PLAYER(2) = Y : PLAYER(3) = A
10050 HTAB(X) : VTAB(Y) : ? "@" : REM DRAW PLAYER
10060 REM IF MOVING > 0 AND MDIR > 0 THEN HTAB(X) : VTAB(Y) : PRINT A$ : GOTO 12500
10080 REM IF MOVING > 0 AND MDIR < 0 THEN HTAB(X) : VTAB(Y) : PRINT A$ : GOTO 13000
10700 REM IF MOVING > 0 THEN PRINT A$ : GOTO 12500

10750 KY = PEEK(49152) : GOSUB 24000 : REM GET LAST PRESSED KEY AND DISPLAY DEBUG CURSOR INFO
11200 IF KY = 0 THEN GOTO 10000
11210 IF KY = K THEN GOTO 10000
11220 K = KY : POKE 49168,0 : REM CLEAR THE KEYBOARD STROBE - ALWAYS AFTER READING KEYBOARD

11400 REM DISPLAY THE MAP CHAR AT THE PLAYER'S PREVIOUS POSITION AND PERFORM MOVE
11500 HTAB(X) : VTAB(Y)
11700 PRINT A$
11720 REM AA$ = A$ : REM TODO : FIX BLINKING
11750 IF K = 101 THEN GOTO 12300 : REM TOGGLE DEBUG WITH "E"

11780 REM -> (21)    D (68)     d (100)    L (76)     l (108)
11800 IF K = 149 OR K = 196 OR K = 228 OR K = 204 OR K = 236 THEN GOTO 12500
11850 REM K = 21 OR K = 149 OR K = 68 OR K = 196 OR K = 100 OR K = 228 OR K = 76 OR K = 204 OR K = 108 OR K = 236 THEN GOTO 12500 : REM MOVING = 1 : MDIR = 1 : GOTO 12500 : REM RIGHT

11880 REM <- (8)     A (65)     a (87)     J (74)     j (106)
11900 IF K = 136 OR K = 193 OR K = 225 OR K = 202 OR K = 234 THEN GOTO 13000
11950 REM IF K = 8 OR K = 136 OR K = 65 OR K = 193 OR K = 97 OR K = 225 OR K = 74 OR K = 202 OR K = 106 OR K = 234 THEN GOTO 13000 : REM MOVING = 1 : MDIR = -1 : GOTO 13000 : REM LEFT

12020 REM ^ (11)     W (87)     w (119)    I (73)    i (105)
12050 IF K = 139 OR K = 215 OR K = 247 OR K = 201 OR K = 233 THEN GOTO 13500
12075 REM IF K = 8 OR K = 136 OR K = 65 OR K = 193 OR K = 97 OR K = 225 OR K = 74 OR K = 202 OR K = 106 OR K = 234 THEN GOTO 13000 : REM UP

12090 REM v (10)     S (83)     s (115)    K (75)     k (107)
12100 IF K = 138 OR K = 211 OR K = 243 OR K = 203 OR K = 235 THEN GOTO 14000 : REM DOWN
12150 REM IF K = 10 OR K = 138 OR K = 83 OR K = 211 OR K = 115 OR K = 243 OR K = 75 OR K = 203 OR K = 107 OR K = 235 THEN GOTO 14000 : REM DOWN

12200 IF K = 32 OR K = 160 THEN GOTO 14500

12250 GOTO 10000

12299 REM TRIGGER DEBUG WITH "E" KEY
12300 IF DEBUG < 4 THEN DEBUG = DEBUG + 1 : HTAB(1) : VTAB(24) : CALL -958 : GOTO 10000
12310 IF DEBUG = 4 THEN DEBUG = 0 : GOSUB 24000 : GOTO 10000

12499 REM LIMIT MOVEMENT
12500 IF A = 160 OR A = 93 OR A = 95 OR A = 90 OR A = 92 THEN X = X + 1 : GOSUB 300 : REM MOVING = MOVING -1
12550 REM TODO: FIX BLINKING
12600 IF A = 94 THEN VTAB(Y) : HTAB(X+1) : ? M$;"\\\\";N$; : MX = 1 : MY = 4 : GOSUB 16000 : REM TODO: FIX HARDCODED STUFF
12700 IF A <> 160 AND A <> 93 AND A <> 90 AND (A <> 92 OR A = 92 AND Y<>19 AND Y<>15 AND Y<>11 AND Y<>7 AND Y<>3) THEN X = X - 1 : MOVING = 0 : GOSUB 300
12800 GOTO 10000

13000 IF A = 160 OR A = 93 OR A = 95 OR A = 90 OR A = 92 THEN X = X - 1 : GOSUB 300 : REM MOVING = MOVING -1
13050 REM TODO: FIX HARDCODED STUFF AROUND DOORS OPENING AND ROOM REVEALING
13100 IF A = 94 THEN ROW = 4 : COL = 1 : VISIBLES(4,1) = 2 : VTAB(Y) : HTAB(X-1) : MX = X-10 : MY = Y-3 : GOSUB 16000 : VTAB(Y) : HTAB(X-2) : ? " ";M$;"\\\\";N$;" ";
13200 IF A <> 160 AND A <> 93 AND A <> 95 AND (A <> 92 OR A = 92 AND Y<>19 AND Y<>15 AND Y<>11 AND Y<>7 AND Y<>3) THEN X = X + 1 : MOVING = 0 : GOSUB 300
13300 GOTO 10000

13500 IF A = 92 THEN GOTO 10000
13550 IF A = 160 OR A = 93 OR A = 95 OR A = 90 THEN Y = Y - 1 : GOSUB 300
13600 IF A = 94 THEN ROW = 2 : COL = 2 : VISIBLES(2,2) = 2 : VTAB(Y-1) : HTAB(X) : MX = X-5 : MY = Y-5 : GOSUB 16000 : VTAB(Y) : HTAB(X-1) : ? M$;"_";N$;" ";M$;"Z";N$;
13700 REM IF A = 94 THEN VTAB(Y) : HTAB(X-1) : ? M$;"Z";N$;" ";M$;"_"; : MX = 1 : MY = 4 : GOSUB 1000 : REM TODO: FIX HARDCODED STUFF
13800 IF A <> 160 AND A <> 93 AND A <> 95 AND A <> 90 OR (A = 92 AND Y<>19 AND Y<>15 AND Y<>11 AND Y<>7 AND Y<>3) THEN Y = Y + 1 : GOSUB 300
13900 GOTO 10000

14000 IF A = 92 THEN GOTO 10000
14100 IF A = 160 OR A = 93 OR A = 95 OR A = 90 THEN Y = Y + 1 : GOSUB 300
14200 IF A <> 160 AND A <> 93 AND A <> 95 AND A <> 90 OR (A = 92 AND Y<>19 AND Y<>15 AND Y<>11 AND Y<>7 AND Y<>3) THEN Y = Y - 1 : GOSUB 300
14300 GOTO 10000

14500 GOSUB 300
14600 GOTO 10000

15900 ? NI$;N$;"Exit" : END


15999 REM DRAW A ROOM
16000 XX = MX+1 : GOSUB 200
16200 VTAB(MY+1)

16300 IF MY < 4 THEN GOTO 16600
16400 ? " ";M$;"\\\\\\\\\\\\\\";N$;" "; : REM DRAW IN BETWEEN ROOM VERTICAL SPACE
16500 GOTO 16800
16600 ? " _______ "; : REM DRAW TOP EDGE BORDER OF THE FIRST ROW ROOMS

16799 REM DRAW EMPTY ROOM
16800 M = MAP(ROW+1, COL+1)
16850 V = VISIBLES(ROW+1, COL+1)
16900 IF V > 0 THEN XX = MX+1 : GOSUB 200 : VTAB(MY+2) : ? M$;"Z_";N$;"     ";M$;"Z_";N$
17000 IF V > 0 OR M <> 0 THEN HTAB(MX+1) : VTAB(MY+3) : ? M$;"Z_";N$;" ";ROOMS$(INSIDES(ROW+1, COL+1)+1);"  ";M$;"Z_";N$
17100 IF V > 0 THEN HTAB(MX+1) : VTAB(MY+4) : ? M$;"Z_";N$;"     ";M$;"Z_";N$

17299 REM GREYED OUT ROOMS
17300 IF V = 0 THEN XX = MX+1 : GOSUB 200 : VTAB(MY+2) : ? M$;"ZVWVWVWV_";N$
17400 IF V = 0 THEN HTAB(MX+1) : VTAB(MY+3) : ? M$;"ZVWVWVWV_";N$
17500 IF V = 0 THEN HTAB(MX+1) : VTAB(MY+4) : ? M$;"ZVWVWVWV_";N$

17600 REM TODO: EXPERIMENT WITH PARTIAL ROOM REVEAL (WHEN THERE ARE ENEMIES FOR EXAMPLE)
17700 REM IF V = 2 THEN HTAB(MX+1) : VTAB(MY+2) : ? M$;"ZWVWVW";N$;"  ";M$;"_";N$
17800 REM IF V = 2 THEN HTAB(MX+1) : VTAB(MY+3) : ? M$;"ZWVWV";N$;"   ";M$;"_";N$
17900 REM IF V = 2 THEN HTAB(MX+1) : VTAB(MY+4) : ? M$;"ZWVWVW";N$;"  ";M$;"_";N$

17999 REM DRAW DOORS
18000 IF V = 0 GOTO 19600

18299 REM HORIZONTAL OPEN DOORS
18300 IF M <> 3 AND M <> 4 AND M <> 8 THEN GOTO 18800
18400 IF VISIBLES(ROW+1, COL+1) = 1 THEN HTAB(MX-1) : VTAB(MY+3) : ? " "
18500 HTAB(MX+2) : VTAB(MY+3) : ? " "
18600 HTAB(MX) : VTAB(MY+3) : ? M$;"\\\\";N$

18799 REM HORIZONTAL CLOSED DOORS
18800 IF M <> 6 AND M <> 7 AND M <> 9 THEN GOTO 19300
18900 IF VISIBLES(ROW+1, COL+1) = 1 THEN HTAB(MX-1) : VTAB(MY+3) : ? M$;"Z";N$
19000 IF VISIBLES(ROW+1, COL+2) = 1 THEN HTAB(MX+2) : VTAB(MY+3) : ? M$;"_";N$
19100 HTAB(MX) : VTAB(MY+3) : ? M$;" ^";N$

19299 REM VERTICAL OPEN DOOR
19300 IF M = 2 OR M = 4 OR M = 9 THEN HTAB(MX+4) : VTAB(MY+1) : ? M$;CHR$(95);N$" ";M$;CHR$(90);N$

19499 REM VERTICAL CLOSED DOOR
19500 IF M = 5 OR M = 7 OR M = 8 THEN HTAB(MX+4) : VTAB(MY+1) : ? M$;" ^ ";N$

19599 REM
19600 IF MY < 15 THEN RETURN
19800 HTAB(MX+1) : VTAB(MY+5) : ? " ";M$;"LLLLLLL";N$;" " : REM DRAW BOTTOM EDGE BORDER OF THE BOTTOM ROW ROOMS

19900 RETURN

20999 REM 
21000 VTAB(1) : HTAB(60) : PRINT MI$;CLASSES$(CLASS);NI$ : REM - INT(LEN(CLASSES$(CLASS))/2)
21001 REM
21010 REM
21190 RETURN


21499 REM CENTER TEXT
21500 REM HTAB (80 - LEN( ST$ ))/2 : REM CENTERING ALGORITHM
21700 REM PRINT ST$
21800 REM RETURN

22008 DIM AVAILABLE(4)
22010 SIZE = 5 : REM INITIALIZE MAZE DIMENSIONS
22015 DIM MAP(SIZE,SIZE) : REM GENERATE MAP CONNECTIONS ARRAY
22020 DIM VISIBLES(SIZE,SIZE) : REM GENERATE MAP VISITED ROOMS ARRAY
22022 DIM INSIDES(SIZE,SIZE) : REM GENERATE MAP CONTENTS ARRAY
22025 DIM SX(SIZE*SIZE)
22030 DIM SY(SIZE*SIZE)


22100 TYPE = 0 : REM 0: LEAD CELL GENERATION (ZIG-ZAG LONGER); 1: RANDOM CELL (MORE CHAOTIC) : TODO TO IMPLEMENT
22110 AVAILABLE(1) = 0 : AVAILABLE(2) = 0 : AVAILABLE(3) = 0 : AVAILABLE(4) = 0 : REM 4 DIRECTIONS
22140 STACK = 0 : INDEX = 0

22145 FOR Y = 1 TO SIZE
22150    FOR X = 1 TO SIZE
22155       MAP(X, Y) = 0
22160       VISIBLES(X, Y) = 0
22162       INSIDES(X, Y) = 0 
22165    NEXT X
22170 NEXT Y




24000 IF DEBUG = 0 OR X = 0 THEN RETURN
24010 HTAB(4) : VTAB(24) : ? MI$;" cursor: ";X;"x";Y;NI$;M$;"N";N$;MI$;" PLR symbol: ";A;
24020 IF A < 10 THEN PRINT "   ";NI$; : GOTO 24050
24030 IF A < 100 THEN PRINT "  ";NI$; : GOTO 24050
24040 PRINT " ";NI$;
24050 HTAB(36) : VTAB(24) : PRINT M$;"V";N$;A$;M$;"V";N$;MI$;" ";NI$;
24060 HTAB(40) : VTAB(24) : PRINT M$;"N";N$;MI$"  key:";
24062 IF KY < 10 THEN PRINT " ";KY;"   ";NI$; : GOTO 24070
24064 IF KY < 100 THEN PRINT " ";KY;"  ";NI$; : GOTO 24070
24066 PRINT " ";KY;" ";NI$;
24070 HTAB(52) : VTAB(24) : PRINT M$"N";N$;MI$;" DEBUG";NI$;M$;"N";N$;MI$;"  ";NI$;
24080 GOSUB 280 : REM FRE
24100 RETURN


25999 REM LOAD DOUBLE HI-RES PICTURE
26000 POKE 49237,0: PRINT D$;"BLOAD ";FF$;", A$2000, L$2000"
26010 POKE 49236,0: PRINT D$;"BLOAD ";FF$;", A$2000, L$2000, B$2000"


60000 ER = PEEK(222)
60005 IF ER = 0 OR ER > 15 THEN PRINT : PRINT : CALL 826
60020 IF ER <> 2 AND ER <> 3 AND ER <> 8 AND ER <> 11 THEN PRINT " ERROR!";
60030 PRINT CHR$(7);" in line ";PEEK(218) + PEEK(219) * 256
60050 ? : REM TRACE VARIABLES
60060 REM PRINT AA$;" ";STACK;" ";XX;"*";YY;" ";X;"*";Y;" U:";INT(RU*10)/10;" R:";INT(RR*10)/10;" D:";INT(RD*10)/10;" L:";INT(RL*10)/10
60090 END
